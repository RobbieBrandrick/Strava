<template id="grid-template">
    <div>
        <table class="table table-hover table-hover table-bordered table-responsive ">
            <thead class="table-primary">
            <tr>
                <th v-for="key in columns"
                    @@click="sortBy(key)"
                >
                    {{ key | capitalize }}
                  <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
                  
                  <svg  v-if="sortKey == key && sortOrders[key] > 0" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down float-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z"/>
                  </svg>
                  
                    <svg   v-if="sortKey == key && sortOrders[key] < 0"  xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up float-right" viewBox="0 0 16 16">
                      <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"/>
                    </svg>        
                  
                  </span>                
                </th>
            </tr>
            </thead>
            <tbody>
            <tr v-for="entry in filteredData">
                <td v-for="key in columns">
                    {{ entry[key] }}
                </td>
            </tr>
            </tbody>
        </table>
        <nav class="d-flex justify-content-center mb-2" aria-label="Page navigation example">
          <ul class="pagination">
            <li class="page-item">
              <button class="btn btn-primary mr-1"  aria-label="Previous" :disabled="page <= 1" @@click="updatePage(page - 1)">
                <span aria-hidden="true">&laquo;</span>
                <span class="sr-only">Previous</span>
              </button>
            </li>
            <li class="page-item" v-for="pageNumber in getPageNumbers">
                <button class="btn btn-primary mr-1" :disabled="page === pageNumber" @@click="updatePage(pageNumber)"> {{ pageNumber }} </button>
            </li>
            <li class="page-item">
              <button class="btn btn-primary mr-1" aria-label="Next" :disabled="page >= numberOfPages" @@click="updatePage(page + 1)">
                <span aria-hidden="true">&raquo;</span>
                <span class="sr-only">Next</span>
              </button>
            </li>    
          </ul>
        </nav>  
    </div>
</template>

<script>
   Vue.component("gridview", {
        template:"#grid-template",
        props: {
            data: Array, 
            columns: Array,
            startPage: {
                type: Number,
                default: 1  
            },
            perPage: {
                type: Number,
                default: 5
            },
        },
        data: function (){
            let sortOrders = {};
            this.columns.forEach(function(key) {
              sortOrders[key] = 1;
            });
            return {
              sortKey: "",
              sortOrders: sortOrders,
              page: this.startPage,
              numberOfPages: 0,
            };  
        },
        computed: {
            filteredData() {
                
                let data = this.data;
                let sortKey = this.sortKey;
                let order = this.sortOrders[sortKey] || 1;                
                
                if (sortKey) {
                  data = data.slice().sort(function(a, b) {
                    a = a[sortKey];
                    b = b[sortKey];
                    return (a === b ? 0 : a > b ? 1 : -1) * order;
                  });            
                }
                
                data = this.paginate(data);
                
                return data;
            
            },
            getPageNumbers() {            
                
                let data = this.data;                
                let pages = []      
                let delta = 3;
                this.numberOfPages = Math.ceil(data.length / this.perPage);
                
                for (let i = this.page - delta; i <= this.page + delta; i++){
                    if (i >= 1 && i <= this.numberOfPages){
                        pages.push(i);    
                    }
                }
                
                return pages;                
            }           
        },
        filters: {
          capitalize: str => str.charAt(0).toUpperCase() + str.slice(1)
        },
        methods: {
          sortBy(key) {
            this.sortKey = key;
            this.sortOrders[key] = this.sortOrders[key] * -1;
          },
		  paginate(data) {
			let page = this.page;
			let perPage = this.perPage;
			let from = (page * perPage) - perPage;
			let to = (page * perPage);
			return  data.slice(from, to);
		  },
          updatePage(value){
            this.page = value;
          } 		  
        }
    });
</script>